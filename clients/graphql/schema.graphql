# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

directive @complexity(value: Int!) on FIELD_DEFINITION

"Alert information"
type Alert {
    "Bloom filter for addresses"
    addressBloomFilter: BloomFilter
    "List of addresses involved in the alert"
    addresses: [String]
    """

    Type of alert
    UNKNOWN
    PRIVATE
    BLOCK
    TRANSACTION
    COMBINATION
    """
    alertDocumentType: String
    """

    Unique string to identify this class of finding,
    primarily used to group similar findings for the end user
    """
    alertId: String
    "Chain id"
    chainId: NonNegativeInt
    "List of contracts related to the alert"
    contracts: [Contract]
    "Timestamp when the alert was published"
    createdAt: String
    "Text description of the alert"
    description: String
    """

    Type of finding

    UNKNOWN_TYPE

    EXPLOIT

    SUSPICIOUS

    DEGRADED

    INFO

    SCAM
    """
    findingType: String
    "Alert hash identifier"
    hash: String
    "List of labels related to the alert"
    labels: [Label]
    "Extra alert information"
    metadata: JSONObject
    "Alert name"
    name: String
    "List of Web3 projects related to the alert"
    projects: [Project]
    "Name of protocol being reported on"
    protocol: String
    "List of alerts involved in the alert"
    relatedAlerts: [String]
    "Number of scanners that found the alert"
    scanNodeCount: Int
    """

    Impact level of finding

    CRITICAL - Exploitable vulnerabilities, massive impact on users/funds

    HIGH - Exploitable under more specific conditions, significant impact on users/funds

    MEDIUM - Notable unexpected behaviours, moderate to low impact on users/funds

    LOW - Minor oversights, negligible impact on users/funds

    INFO - Miscellaneous behaviours worth describing
    """
    severity: String
    "Source where the alert was detected"
    source: AlertSource
    "Flags alert as truncated for size purposes"
    truncated: Boolean
}

type AlertEndCursor {
    alertId: String!
    blockNumber: NonNegativeInt!
}

type AlertPageInfo {
    endCursor: AlertEndCursor!
    hasNextPage: Boolean!
    totalAlerts: TotalMetadata!
}

"Source where the threat was detected"
type AlertSource {
    "Block where the threat was detected"
    block: Block
    "Bot that triggered the alert"
    bot: Bot
    "Source alert event the threat was detected"
    sourceAlert: SourceAlertEvent
    "Transaction where the threat was detected"
    transactionHash: String
}

type AlertsResponse {
    alerts: [Alert]
    pageInfo: AlertPageInfo
}

"Batch information"
type Batch {
    "chain id on batch was created from"
    chainId: NonNegativeInt
    "Timestamp when the batch was published"
    createdAt: String
    "Batch id"
    id: String
    "Id of preceding batch to form chain"
    parentId: String
    "Receipt id for the batch"
    receiptId: String
    "Reference to scanner that sent this batch request"
    scanNodeId: String
}

type BatchEndCursor {
    createdAt: String
}

type BatchPageInfo {
    endCursor: BatchEndCursor
    hasNextPage: Boolean
    totalBatches: TotalMetadata!
}

type BatchesResponse {
    batches: [Batch]
    pageInfo: BatchPageInfo
}

"Block information"
type Block {
    "Block's chain id"
    chainId: NonNegativeInt
    "Block hash"
    hash: String
    "Block number"
    number: NonNegativeInt
    "Block's timestamp"
    timestamp: String
}

"Bloom filter information"
type BloomFilter {
    "Bloom filter as bitset, encoded in base64"
    bitset: String
    "Total number of addresses in filter"
    itemCount: NonNegativeInt
    "Number of hash functions used in filter"
    k: String
    "Capacity of bloom filter"
    m: String
}

"Bot information"
type Bot {
    chainIds: [String]
    createdAt: String
    description: String
    "Bot Developer address"
    developer: String
    "Bot Documentation IPFS reference"
    docReference: String
    enabled: Boolean
    "Bot id"
    id: String
    "Bot docker image hash"
    image: String
    name: String
    "Projects the bot monitors"
    projects: [String]
    "Bot manifest IPFS reference"
    reference: String
    "Bot code repository url"
    repository: String
    "List of scanNodes running the bot"
    scanNodes: [String]
    version: String
}

type BotEndCursor {
    createdAt: String
}

type BotPageInfo {
    endCursor: BotEndCursor
    hasNextPage: Boolean
    totalBots: TotalMetadata!
}

type BotsResponse {
    bots: [Bot]
    pageInfo: BotPageInfo
}

"Project Contact Information"
type Contacts {
    "General contact email"
    generalEmailAddress: EmailAddress
    "Security contact email"
    securityEmailAddress: EmailAddress
}

"Smart Contract Information"
type Contract {
    "EIP55 checksummed deployment address"
    address: String!
    "User-friendly name of the contract"
    name: String!
    "Related web3 project"
    projectId: String!
}

"Label information"
type Label {
    "Label confidence"
    confidence: Float
    "Label's entity"
    entity: String
    "Label's entity type"
    entityType: String
    "Label name"
    label: String
    "Extra label information"
    metadata: [String]
    "Label's status"
    remove: Boolean
}

"Web3 Project Information"
type Project {
    "List of contact info"
    contacts: Contacts
    "Project identifier"
    id: String!
    "User-friendly name of the project"
    name: String!
    social: Social
    token: Token
    "Main website of the project"
    website: String
}

type ProjectEdge {
    cursor: String
    node: Project
}

type ProjectPageInfo {
    endCursor: String
    hasNextPage: Boolean
    totalProjects: TotalMetadata!
}

type ProjectsResponse {
    edges: [ProjectEdge]
    pageInfo: ProjectPageInfo
}

type Query {
    "Fetches alerts"
    alerts(input: AlertsInput): AlertsResponse
    "Fetches a batch given its batch ID"
    batch(id: String!): Batch
    "Fetches batches"
    batches(input: BatchesInput): BatchesResponse
    "Fetches bots"
    bots(input: BotsInput): BotsResponse
    "Fetches a web3 project given its project ID"
    project(id: String!): Project
    """

    Fetches all existing web3 projects recorded in github repo:
    https://github.com/ethereum-lists/contracts/tree/main/projects
    """
    projects(input: ProjectsInput): ProjectsResponse
}

"Social Media Links"
type Social {
    "Path to the coingecko identifier"
    coingecko: String
    "Identifier in the everest.link registry"
    everest: String
    "Github organization slug"
    github: String
    "Twitter account name"
    twitter: String
}

"Source alert information"
type SourceAlertEvent {
    "Bot id"
    botId: String
    "Chain id"
    chainId: NonNegativeInt
    "Alert hash"
    hash: String
    "Alert timestamp"
    timestamp: String
}

"Project Token Information"
type Token {
    "Address where the project token is deployed"
    address: String!
    "EIP155 identifier of the chain where the project token is deployed"
    chainId: Int!
    "Decimals of the token contract"
    decimals: Int
    "Name of the token"
    name: String
    "Symbol of the token"
    symbol: String
}

"Metadata about the number of matching items"
type TotalMetadata {
    "Indicates whether the number of matching items in the value parameter is accurate or a lower bound."
    relation: Relation!
    "Total number of matching documents."
    value: NonNegativeInt!
}

enum Relation {
    eq
    gte
}

enum Sort {
    asc
    desc
}

"The `BigInt` scalar type represents non-fractional signed whole numeric values."
scalar BigInt

"The `Byte` scalar type represents byte value as a Buffer"
scalar Byte

"A field whose value is a Currency: https://en.wikipedia.org/wiki/ISO_4217."
scalar Currency

"A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/."
scalar DID

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"""

A string representing a duration conforming to the ISO8601 standard,
such as: P1W1DT13H23M34S
P is the duration designator (for period) placed at the start of the duration representation.
Y is the year designator that follows the value for the number of years.
M is the month designator that follows the value for the number of months.
W is the week designator that follows the value for the number of weeks.
D is the day designator that follows the value for the number of days.
T is the time designator that precedes the time components of the representation.
H is the hour designator that follows the value for the number of hours.
M is the minute designator that follows the value for the number of minutes.
S is the second designator that follows the value for the number of seconds.

Note the time designator, T, that precedes the time value.

Matches moment.js, Luxon and DateFns implementations
,/. is valid for decimal places and +/- is a valid prefix
"""
scalar Duration

"A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/."
scalar EmailAddress

"A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier."
scalar GUID

"A field whose value is a CSS HSL color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla()."
scalar HSL

"A field whose value is a CSS HSLA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla()."
scalar HSLA

"A field whose value is a hex color code: https://en.wikipedia.org/wiki/Web_colors."
scalar HexColorCode

"A field whose value is a hexadecimal: https://en.wikipedia.org/wiki/Hexadecimal."
scalar Hexadecimal

"A field whose value is an International Bank Account Number (IBAN): https://en.wikipedia.org/wiki/International_Bank_Account_Number."
scalar IBAN

"A field whose value is a IPv4 address: https://en.wikipedia.org/wiki/IPv4."
scalar IPv4

"A field whose value is a IPv6 address: https://en.wikipedia.org/wiki/IPv6."
scalar IPv6

"A field whose value is a ISBN-10 or ISBN-13 number: https://en.wikipedia.org/wiki/International_Standard_Book_Number."
scalar ISBN

"""

A string representing a duration conforming to the ISO8601 standard,
such as: P1W1DT13H23M34S
P is the duration designator (for period) placed at the start of the duration representation.
Y is the year designator that follows the value for the number of years.
M is the month designator that follows the value for the number of months.
W is the week designator that follows the value for the number of weeks.
D is the day designator that follows the value for the number of days.
T is the time designator that precedes the time components of the representation.
H is the hour designator that follows the value for the number of hours.
M is the minute designator that follows the value for the number of minutes.
S is the second designator that follows the value for the number of seconds.

Note the time designator, T, that precedes the time value.

Matches moment.js, Luxon and DateFns implementations
,/. is valid for decimal places and +/- is a valid prefix
"""
scalar ISO8601Duration

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSONObject

"A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction."
scalar JWT

"A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude"
scalar Latitude

"A local date string (i.e., with no associated timezone) in `YYYY-MM-DD` format, e.g. `2020-01-01`."
scalar LocalDate

"A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.  This scalar is very similar to the `LocalTime`, with the only difference being that `LocalEndTime` also allows `24:00` as a valid value to indicate midnight of the following day.  This is useful when using the scalar to represent the exclusive upper bound of a time block."
scalar LocalEndTime

"A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`."
scalar LocalTime

"The `BigInt` scalar type represents non-fractional signed whole numeric values."
scalar Long

"A field whose value is a valid decimal degrees longitude number (53.471): https://en.wikipedia.org/wiki/Longitude"
scalar Longitude

"A field whose value is a IEEE 802 48-bit MAC address: https://en.wikipedia.org/wiki/MAC_address."
scalar MAC

"Floats that will have a value less than 0."
scalar NegativeFloat

"Integers that will have a value less than 0."
scalar NegativeInt

"A string that cannot be passed as an empty value"
scalar NonEmptyString

"Floats that will have a value of 0 or more."
scalar NonNegativeFloat

"Integers that will have a value of 0 or more."
scalar NonNegativeInt

"Floats that will have a value of 0 or less."
scalar NonPositiveFloat

"Integers that will have a value of 0 or less."
scalar NonPositiveInt

"A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c"
scalar ObjectID

"A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234."
scalar PhoneNumber

"A field whose value is a valid TCP port within the range of 0 to 65535: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_ports"
scalar Port

"Floats that will have a value greater than 0."
scalar PositiveFloat

"Integers that will have a value greater than 0."
scalar PositiveInt

"A field whose value conforms to the standard postal code formats for United States, United Kingdom, Germany, Canada, France, Italy, Australia, Netherlands, Spain, Denmark, Sweden, Belgium, India, Austria, Portugal, Switzerland or Luxembourg."
scalar PostalCode

"A field whose value is a CSS RGB color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()."
scalar RGB

"A field whose value is a CSS RGBA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()."
scalar RGBA

"The `SafeInt` scalar type represents non-fractional signed whole numeric values that are considered safe as defined by the ECMAScript specification."
scalar SafeInt

"A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Time

"The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch."
scalar Timestamp

"A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt."
scalar URL

"A currency string, such as $21.25"
scalar USCurrency

"A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier."
scalar UUID

"Floats that will have a value of 0 or more."
scalar UnsignedFloat

"Integers that will have a value of 0 or more."
scalar UnsignedInt

"A field whose value is a UTC Offset: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"
scalar UtcOffset

"Represents NULL values"
scalar Void

"Search after specified block number and alertId"
input AlertEndCursorInput {
    alertId: String!
    blockNumber: NonNegativeInt!
}

"Alert list input"
input AlertsInput {
    """

    Indicate a list of addresses.
    Alerts returned will have those addresses involved.
    """
    addresses: [String]
    "Search results after the specified cursor"
    after: AlertEndCursorInput
    "Get a specific alert by alert hash."
    alertHash: String
    "Filter alerts by alert-id."
    alertId: String
    "Filter alerts by multiple alert-ids."
    alertIds: [String]
    "Filter alerts by alert name."
    alertName: String
    """

    Block Date range
    Alerts returned will be between the specified start and end block timestamp dates when the threats were detected.
    By default, start and end date will be set to local query execution date.
    """
    blockDateRange: DateRange
    """

    Block number range
    Alerts for the block number range will be returned.
    """
    blockNumberRange: BlockRange
    """

    Indicate sorting order by block number,
    'desc' or 'asc'.
    Default is 'desc'.
    """
    blockSortDirection: Sort
    """

    Block Timestamp range
    Alerts returned will be between the specified start and end block timestamp when the threats were detected.
    """
    blockTimestampRange: TimestampRange
    """

    Indicate a list of bot hashes.
    Alerts returned will only be from any of those bots.
    """
    bots: [String]
    """

    Indicate a chain Id: EIP155 identifier of the chain
    Alerts returned will only be from the specific chain Id
    Default is 1 = Ethereum Mainnet.
    """
    chainId: NonNegativeInt
    """

    Indicate number of milliseconds
    Alerts returned will be alerts created before the number of milliseconds indicated ago.
    """
    createdBefore: NonNegativeInt
    """

    Indicate number of milliseconds
    Alerts returned will be alerts created since the number of milliseconds indicated ago.
    """
    createdSince: NonNegativeInt
    "Indicate max number of results."
    first: NonNegativeInt
    """

    Indicate a project Id.
    Alerts returned will only be from that project.
    """
    projectId: String
    "Filter alerts by number of scan nodes confirming the alert."
    scanNodeConfirmations: scanNodeFilters
    "Filter alerts by severity levels."
    severities: [String]
    """

    Indicate a transaction hash
    Alerts returned will only be from that transaction.
    """
    transactionHash: String
}

"Search after specified batch after id"
input BatchEndCursorInput {
    createdAt: DateTime
}

"Batch list input"
input BatchesInput {
    "Search results after the specified cursor"
    after: BatchEndCursorInput
    """

    Indicate a chain Id: EIP155 identifier of the chain
    Alerts returned will only be from the specific chain Id
    Default is 1 = Ethereum Mainnet.
    """
    chainId: NonNegativeInt
    "Batches returned will only be those created in the time range"
    createdRange: TimestampRange
    "Indicate max number of results."
    first: NonNegativeInt
    "Filter batch by parent's Id."
    parentId: String
    "Filter batches by receiptId."
    receiptId: String
    "Filter batches by scanner."
    scanNodeId: String
}

"Block range"
input BlockRange {
    endBlockNumber: NonNegativeInt!
    startBlockNumber: NonNegativeInt!
}

"Search after specified bot createdAt"
input BotEndCursorInput {
    createdAt: Timestamp
}

"Bot list input"
input BotsInput {
    "Search results after the specified cursor"
    after: BotEndCursorInput
    """

    Indicate sorting order by bot createdAt
    'desc' or 'asc'.
    Default is 'desc'.
    """
    createdAtSortDirection: Sort
    "Filter bots by developer checksum address."
    developer: String
    "Filter bots by enabled flag."
    enabled: Boolean
    "Indicate max number of results."
    first: NonNegativeInt
    "Filter bots by bot Ids."
    ids: [String]
    """

    Filter bots by bot name.
    Case insensitive partial match.
    """
    name: String
}

"""

Date range
Date format: YYYY-MM-DD
"""
input DateRange {
    endDate: LocalDate!
    startDate: LocalDate!
}

input ProjectsInput {
    after: String
    first: Int
}

"""

Timestamp range
Timestamp format: number of milliseconds from start of UNIX epoch
"""
input TimestampRange {
    endTimestamp: Timestamp!
    startTimestamp: Timestamp!
}

"Filter by number of scan nodes confirming the alert."
input scanNodeFilters {
    gte: NonNegativeInt
    lte: NonNegativeInt
}
