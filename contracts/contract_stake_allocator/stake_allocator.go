// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract_stake_allocator

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StakeAllocatorMetaData contains all meta data concerning the StakeAllocator contract.
var StakeAllocatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subjectGateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsDistributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddressManager\",\"type\":\"address\"}],\"name\":\"AccessManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAllocated\",\"type\":\"uint256\"}],\"name\":\"AllocatedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAllocated\",\"type\":\"uint256\"}],\"name\":\"UnallocatedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateDelegatorStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateOwnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"allocatedDelegatorsStakePerManaged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"allocatedManagedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"allocatedOwnStakePerManaged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"allocatedStakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"allocatedStakePerManaged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"activeSharesId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"}],\"name\":\"depositAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"}],\"name\":\"didTransferShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"}],\"name\":\"getDelegatedSubjectType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"}],\"name\":\"getDelegatorSubjectType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"}],\"name\":\"getSubjectTypeAgency\",\"outputs\":[{\"internalType\":\"enumSubjectTypeValidator.SubjectStakeAgency\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__manager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setAccessManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unallocateDelegatorStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unallocateOwnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"unallocatedStakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"activeSharesId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101006040523060a0523480156200001657600080fd5b50604051620039923803806200399283398101604081905262000039916200024c565b6001600160a01b038316608052600054610100900460ff1615808015620000675750600054600160ff909116105b8062000097575062000084306200022060201b620019de1760201c565b15801562000097575060005460ff166001145b620001005760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000124576000805461ff0019166101001790555b6001600160a01b0383166200016e5760405163eac0d38960e01b815260206004820152600e60248201526d7375626a6563744761746577617960901b6044820152606401620000f7565b6001600160a01b038216620001bc5760405163eac0d38960e01b81526020600482015260126024820152713932bbb0b93239a234b9ba3934b13aba37b960711b6044820152606401620000f7565b6001600160a01b0380841660c052821660e052801562000216576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505062000296565b6001600160a01b03163b151590565b80516001600160a01b03811681146200024757600080fd5b919050565b6000806000606084860312156200026257600080fd5b6200026d846200022f565b92506200027d602085016200022f565b91506200028d604085016200022f565b90509250925092565b60805160a05160c05160e05161361a6200037860003960008181611279015281816113b4015281816117490152818161189f0152818161198601528181611e240152611f960152600081816107090152818161082001528181610ac701528181610c3001528181610d5e01528181610f63015281816114bf0152818161156f0152818161223701528181612308015281816123ac015281816124880152818161255501526125f90152600081816105e801528181610628015281816109040152818161094401526109d70152600081816102d0015261273f015261361a6000f3fe6080604052600436106101815760003560e01c80639e4db100116100d1578063c4d66de81161008a578063d39cbd1211610064578063d39cbd12146104ca578063d858a7e5146104ea578063dfb4308e146104ff578063e2c11b8d1461051f57600080fd5b8063c4d66de81461046a578063c95808041461048a578063d0d87ac8146104aa57600080fd5b80639e4db1001461039d578063a14d787c146103bd578063ac9650d8146103dd578063b18d6d531461040a578063c133a5621461042a578063c1bf97c81461044a57600080fd5b806352d1902d1161013e578063574ef61311610118578063574ef613146103105780636f096be814610330578063762fa7b714610350578063993a364f1461037d57600080fd5b806352d1902d1461025257806354fd4d5014610275578063572b6c05146102b357600080fd5b80631daa0445146101865780633121db1c146101bd5780633659cfe6146101df578063499572af146101ff5780634edd0f241461021f5780634f1ef2861461023f575b600080fd5b34801561019257600080fd5b506101a66101a1366004612d26565b61053f565b60405160ff90911681526020015b60405180910390f35b3480156101c957600080fd5b506101dd6101d8366004612d56565b61055d565b005b3480156101eb57600080fd5b506101dd6101fa366004612ddb565b6105dd565b34801561020b57600080fd5b506101dd61021a366004612df8565b6106bd565b34801561022b57600080fd5b506101dd61023a366004612df8565b6107f1565b6101dd61024d366004612e41565b6108f9565b34801561025e57600080fd5b506102676109ca565b6040519081526020016101b4565b34801561028157600080fd5b506102a6604051806040016040528060058152602001640302e312e360dc1b81525081565b6040516101b49190612f5d565b3480156102bf57600080fd5b506103006102ce366004612ddb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405190151581526020016101b4565b34801561031c57600080fd5b5061026761032b366004612f70565b610a7d565b34801561033c57600080fd5b5061026761034b366004612f70565b610b6e565b34801561035c57600080fd5b5061037061036b366004612d26565b610b90565b6040516101b49190612fd2565b34801561038957600080fd5b50610267610398366004612f70565b610be6565b3480156103a957600080fd5b506102676103b8366004612f70565b610cbc565b3480156103c957600080fd5b506101dd6103d8366004612df8565b610d2f565b3480156103e957600080fd5b506103fd6103f8366004612fe0565b610e3f565b6040516101b49190613055565b34801561041657600080fd5b506101dd610425366004612df8565b610f34565b34801561043657600080fd5b506101a6610445366004612d26565b611046565b34801561045657600080fd5b50610267610465366004612f70565b61105c565b34801561047657600080fd5b506101dd610485366004612ddb565b61106b565b34801561049657600080fd5b506101dd6104a5366004612ddb565b611137565b3480156104b657600080fd5b506101dd6104c53660046130b7565b6111f5565b3480156104d657600080fd5b506102676104e5366004612f70565b61147a565b3480156104f657600080fd5b506101dd6115fb565b34801561050b57600080fd5b506101dd61051a3660046130b7565b611686565b34801561052b57600080fd5b506101dd61053a366004613111565b611948565b600060ff82166003141561055557506002919050565b5060ff919050565b7f664245c7af190fec316596e8231f724e8171b1966cfcd124347ac5a66c34f64a61058f8161058a6119ed565b6119fc565b6105cc578061059c6119ed565b6040516301d4003760e61b815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b6105d7848484611a81565b50505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156106265760405162461bcd60e51b81526004016105c39061316a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661066f60008051602061357e833981519152546001600160a01b031690565b6001600160a01b0316146106955760405162461bcd60e51b81526004016105c3906131b6565b61069e81611b97565b604080516000808252602082019092526106ba91839190611bd1565b50565b826002806106ca83610b90565b60048111156106db576106db612f9a565b1461070757816106ea83610b90565b826040516365f3939760e01b81526004016105c393929190613202565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ebe6f2c486866107406119ed565b6040518463ffffffff1660e01b815260040161075e9392919061322e565b60206040518083038186803b15801561077657600080fd5b505afa15801561078a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ae9190613252565b6107d75760405163d43dcbe160e01b815260ff86166004820152602481018590526044016105c3565b6107ea85856107e46119ed565b86611d50565b5050505050565b826002806107fe83610b90565b600481111561080f5761080f612f9a565b1461081e57816106ea83610b90565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ebe6f2c486866108576119ed565b6040518463ffffffff1660e01b81526004016108759392919061322e565b60206040518083038186803b15801561088d57600080fd5b505afa1580156108a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c59190613252565b6108ee5760405163d43dcbe160e01b815260ff86166004820152602481018590526044016105c3565b6107ea858585611f28565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109425760405162461bcd60e51b81526004016105c39061316a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661098b60008051602061357e833981519152546001600160a01b031690565b6001600160a01b0316146109b15760405162461bcd60e51b81526004016105c3906131b6565b6109ba82611b97565b6109c682826001611bd1565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a6a5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105c3565b5060008051602061357e83398151915290565b60006002610a8a84610b90565b6004811115610a9b57610a9b612f9a565b14610aa857506000610b68565b60405163b3b68d8b60e01b815260ff84166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b3b68d8b9060440160206040518083038186803b158015610b1157600080fd5b505afa158015610b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b499190613274565b610b5b610b5585611046565b8461105c565b610b6591906132a3565b90505b92915050565b6000610b65610b7d84846120a6565b600090815261012f602052604090205490565b600060ff821660011415610ba657506001919050565b60ff821660021415610bba57506002919050565b60ff821660031415610bce57506003919050565b60ff8216610bde57506004919050565b506000919050565b60006002610bf384610b90565b6004811115610c0457610c04612f9a565b14610c1157506000610b68565b60405163b3b68d8b60e01b815260ff84166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b3b68d8b9060440160206040518083038186803b158015610c7a57600080fd5b505afa158015610c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb29190613274565b610b5b848461105c565b60006002610cc984610b90565b6004811115610cda57610cda612f9a565b1415610d2657610d08610cf5610cef85611046565b846120a6565b600090815261012d602052604090205490565b610d15610cf585856120a6565b610d1f91906132c5565b9050610b68565b50600092915050565b82600280610d3c83610b90565b6004811115610d4d57610d4d612f9a565b14610d5c57816106ea83610b90565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ebe6f2c48686610d956119ed565b6040518463ffffffff1660e01b8152600401610db39392919061322e565b60206040518083038186803b158015610dcb57600080fd5b505afa158015610ddf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e039190613252565b610e2c5760405163d43dcbe160e01b815260ff86166004820152602481018590526044016105c3565b6107ea610e3886611046565b8585611f28565b60608167ffffffffffffffff811115610e5a57610e5a612e2b565b604051908082528060200260200182016040528015610e8d57816020015b6060815260200190600190039081610e785790505b50905060005b82811015610f2d57610efd30858584818110610eb157610eb16132dd565b9050602002810190610ec391906132f3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120f292505050565b828281518110610f0f57610f0f6132dd565b60200260200101819052508080610f2590613341565b915050610e93565b5092915050565b82600280610f4183610b90565b6004811115610f5257610f52612f9a565b14610f6157816106ea83610b90565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ebe6f2c48686610f9a6119ed565b6040518463ffffffff1660e01b8152600401610fb89392919061322e565b60206040518083038186803b158015610fd057600080fd5b505afa158015610fe4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110089190613252565b6110315760405163d43dcbe160e01b815260ff86166004820152602481018590526044016105c3565b6107ea61103d86611046565b856107e46119ed565b600060ff82166002141561055557506003919050565b6000610b65610cf584846120a6565b600054610100900460ff161580801561108b5750600054600160ff909116105b806110a55750303b1580156110a5575060005460ff166001145b6110c15760405162461bcd60e51b81526004016105c39061335c565b6000805460ff1916600117905580156110e4576000805461ff0019166101001790555b6110ed82612117565b80156109c6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b60006111458161058a6119ed565b611152578061059c6119ed565b61116c6001600160a01b038316637965db0b60e01b6121a1565b6111aa576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b60448201526064016105c3565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a25050565b7fc1f968a51cafd0d994ea5efed1570f584045398ccad7dc4ce4e34ea86ff5c2496112228161058a6119ed565b61122f578061059c6119ed565b600087815261012f60205260408120549061124a82866133aa565b905060008113156113905761126261012d8a836121bd565b604051630ce00fe760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630ce00fe7906112b6908b908b9086908a908d906004016133e9565b600060405180830381600087803b1580156112d057600080fd5b505af11580156112e4573d6000803e3d6000fd5b50505060008a815261012d602052604081205489925060ff8b169160008051602061355e83398151915291859060408051931515845260208401929092529082015260600160405180910390a3600089815261012f6020526040902054611351908a9061012f91906121bd565b6040805160008082526020820185905291810191909152879060ff8a169060008051602061359e833981519152906060015b60405180910390a361146f565b61139d61012f8a876121bd565b604051630ce00fe760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630ce00fe7906113f2908b908b906000908a908d906004016133e9565b600060405180830381600087803b15801561140c57600080fd5b505af1158015611420573d6000803e3d6000fd5b50505060008a815261012f602052604081205489925060ff8b169160008051602061359e8339815191529189905b60408051931515845260208401929092529082015260600160405180910390a35b505050505050505050565b6000600261148784610b90565b600481111561149857611498612f9a565b141580611543575060405163b3b68d8b60e01b815260ff84166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b3b68d8b9060440160206040518083038186803b15801561150957600080fd5b505afa15801561151d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115419190613274565b155b1561155057506000610b68565b60405163b3b68d8b60e01b815260ff84166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b3b68d8b9060440160206040518083038186803b1580156115b957600080fd5b505afa1580156115cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f19190613274565b610b5b8484610cbc565b6065546001600160a01b03166116495760405163eac0d38960e01b81526020600482015260126024820152712fb232b83932b1b0ba32b22fb937baba32b960711b60448201526064016105c3565b606580546001600160a01b03191690556040516000907f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80908290a2565b7fc1f968a51cafd0d994ea5efed1570f584045398ccad7dc4ce4e34ea86ff5c2496116b38161058a6119ed565b6116c0578061059c6119ed565b60006116cb87610b90565b905060028160048111156116e1576116e1612f9a565b14158015611701575060038160048111156116fe576116fe612f9a565b14155b1561170c575061193f565b600061171b8888848989612200565b509050600081131561187b5761173f89611735838861341a565b61012d9190612702565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016638063266d898961177a858a61341a565b888b6040518663ffffffff1660e01b815260040161179c9594939291906133e9565b600060405180830381600087803b1580156117b657600080fd5b505af11580156117ca573d6000803e3d6000fd5b50505050868860ff1660008051602061355e833981519152600184896117f0919061341a565b60008e815261012d602052604090205460408051931515845260208401929092529082015260600160405180910390a361182d61012f8a83612702565b8660ff891660008051602061359e83398151915260018461185e61012f8f6000908152602091909152604090205490565b604080519315158452602084019290925290820152606001611383565b61188861012d8a87612702565b604051638063266d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638063266d906118dc908b908b908a908a908d906004016133e9565b600060405180830381600087803b1580156118f657600080fd5b505af115801561190a573d6000803e3d6000fd5b50505060008a815261012d602052604090205488915060ff8a169060008051602061355e83398151915290600190899061144e565b50505050505050565b60405163e2c11b8d60e01b81526004810186905260ff851660248201526001600160a01b0384811660448301528381166064830152608482018390527f0000000000000000000000000000000000000000000000000000000000000000169063e2c11b8d9060a401600060405180830381600087803b1580156119ca57600080fd5b505af115801561146f573d6000803e3d6000fd5b6001600160a01b03163b151590565b60006119f761273b565b905090565b603354604051632474521560e21b8152600481018490526001600160a01b03838116602483015260009216906391d148549060440160206040518083038186803b158015611a4957600080fd5b505afa158015611a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b659190613252565b6040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526001600160a01b038416906302571be39060240160206040518083038186803b158015611ae057600080fd5b505afa158015611af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b189190613431565b6001600160a01b031663c47f002783836040518363ffffffff1660e01b8152600401611b4592919061344e565b602060405180830381600087803b158015611b5f57600080fd5b505af1158015611b73573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d79190613274565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3611bc48161058a6119ed565b6109c6578061059c6119ed565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611c0957611c048361279e565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c4257600080fd5b505afa925050508015611c72575060408051601f3d908101601f19168201909252611c6f91810190613274565b60015b611cd55760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105c3565b60008051602061357e8339815191528114611d445760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105c3565b50611c0483838361283a565b6000611d5c85856120a6565b600081815261012f6020526040902054909150821115611dab57600081815261012f602052604090205482905b604051637f16270360e01b8152600481019290925260248201526044016105c3565b600080611dc38787611dbc8a610b90565b8888612200565b915091506000821315611df357604051637f16270360e01b815260048101859052602481018290526044016105c3565b611e0061012d8486612702565b611e0d61012f84866121bd565b604051638063266d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638063266d90611e62908a908a90899060009081906004016133e9565b600060405180830381600087803b158015611e7c57600080fd5b505af1158015611e90573d6000803e3d6000fd5b505050600084815261012d60209081526040918290205482516001815291820188905281830152905188925060ff8a169160008051602061355e833981519152919081900360600190a3600083815261012f602090815260408083205481519384529183018790528281019190915251879160ff8a169160008051602061359e8339815191529181900360600190a350505050505050565b6000611f3484846120a6565b600081815261012d6020526040902054909150821115611f6557600081815261012d60205260409020548290611d89565b611f7261012d82846121bd565b611f7f61012f8284612702565b604051630ce00fe760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630ce00fe790611fd49087908790879060009081906004016133e9565b600060405180830381600087803b158015611fee57600080fd5b505af1158015612002573d6000803e3d6000fd5b505050600082815261012d602052604081205485925060ff87169160008051602061355e83398151915291869060408051931515845260208401929092529082015260600160405180910390a38260ff851660008051602061359e83398151915260018561208061012f876000908152602091909152604090205490565b60408051931515845260208401929092529082015260600160405180910390a350505050565b6040805160f884901b6001600160f81b031916602080830191909152602180830194909452825180830390940184526041909101909152815191012060091b60ff909116176101001790565b6060610b6583836040518060600160405280602781526020016135be6027913961285f565b600054610100900460ff16158080156121375750600054600160ff909116105b806121515750303b158015612151575060005460ff166001145b61216d5760405162461bcd60e51b81526004016105c39061335c565b6000805460ff191660011790558015612190576000805461ff0019166101001790555b612199826128ff565b6110ed612a59565b60006121ac83612ac6565b8015610b655750610b658383612af9565b600082815260208490526040812080548392906121db90849061341a565b92505081905550808360010160008282546121f6919061341a565b9091555050505050565b600080808080600288600481111561221a5761221a612f9a565b141561244157604051633af9bcb160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ebe6f2c490612270908d908d908c9060040161322e565b60206040518083038186803b15801561228857600080fd5b505afa15801561229c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c09190613252565b6122e95760405163d43dcbe160e01b815260ff8b166004820152602481018a90526044016105c3565b60405163b3b68d8b60e01b815260ff8b166004820152602481018a90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b3b68d8b9060440160206040518083038186803b15801561235257600080fd5b505afa158015612366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238a9190613274565b60405163cdf50e1760e01b815260ff8c166004820152602481018b90529093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cdf50e179060440160206040518083038186803b1580156123f657600080fd5b505afa15801561240a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242e9190613274565b915061243a8a8a610cbc565b90506126c9565b600388600481111561245557612455612f9a565b14156126c95760006124668b61053f565b60405163b3b68d8b60e01b815260ff82166004820152602481018c90529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b3b68d8b9060440160206040518083038186803b1580156124d257600080fd5b505afa1580156124e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250a9190613274565b935083612536576040516303905a9f60e11b815260ff82166004820152602481018b90526044016105c3565b60405163cdf50e1760e01b815260ff82166004820152602481018b90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cdf50e179060440160206040518083038186803b15801561259f57600080fd5b505afa1580156125b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d79190613274565b6040516305aa21af60e31b815260ff83166004820152602481018c90529093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632d510d789060440160206040518083038186803b15801561264357600080fd5b505afa158015612657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267b9190613274565b84612686838d61105c565b61269091906132a3565b10156126bb5760405163dd2ef27760e01b815260ff82166004820152602481018b90526044016105c3565b6126c5818b610cbc565b9150505b6126d3838361347d565b6126dd87836132c5565b6126e791906133aa565b6126f1848461347d565b945094505050509550959350505050565b600082815260208490526040812080548392906127209084906132c5565b92505081905550808360010160008282546121f691906132c5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314156127995760003661277c60148261341a565b6127889236929061349c565b612791916134c6565b60601c905090565b503390565b6001600160a01b0381163b61280b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105c3565b60008051602061357e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61284383612be2565b6000825111806128505750805b15611c04576105d78383612c22565b60606001600160a01b0384163b6128885760405162461bcd60e51b81526004016105c3906134fb565b600080856001600160a01b0316856040516128a39190613541565b600060405180830381855af49150503d80600081146128de576040519150601f19603f3d011682016040523d82523d6000602084013e6128e3565b606091505b50915091506128f3828286612cd7565b925050505b9392505050565b600054610100900460ff161580801561291f5750600054600160ff909116105b806129395750303b158015612939575060005460ff166001145b6129555760405162461bcd60e51b81526004016105c39061335c565b6000805460ff191660011790558015612978576000805461ff0019166101001790555b6129926001600160a01b038316637965db0b60e01b6121a1565b6129d0576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b60448201526064016105c3565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a280156109c6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200161112b565b600054610100900460ff16612ac45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105c3565b565b6000612ad9826301ffc9a760e01b612af9565b8015610b685750612af2826001600160e01b0319612af9565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090612b60908690613541565b6000604051808303818686fa925050503d8060008114612b9c576040519150601f19603f3d011682016040523d82523d6000602084013e612ba1565b606091505b5091509150602081511015612bbc5760009350505050610b68565b818015612bd8575080806020019051810190612bd89190613252565b9695505050505050565b612beb8161279e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612c4b5760405162461bcd60e51b81526004016105c3906134fb565b600080846001600160a01b031684604051612c669190613541565b600060405180830381855af49150503d8060008114612ca1576040519150601f19603f3d011682016040523d82523d6000602084013e612ca6565b606091505b5091509150612cce82826040518060600160405280602781526020016135be60279139612cd7565b95945050505050565b60608315612ce65750816128f8565b825115612cf65782518084602001fd5b8160405162461bcd60e51b81526004016105c39190612f5d565b803560ff81168114612d2157600080fd5b919050565b600060208284031215612d3857600080fd5b610b6582612d10565b6001600160a01b03811681146106ba57600080fd5b600080600060408486031215612d6b57600080fd5b8335612d7681612d41565b9250602084013567ffffffffffffffff80821115612d9357600080fd5b818601915086601f830112612da757600080fd5b813581811115612db657600080fd5b876020828501011115612dc857600080fd5b6020830194508093505050509250925092565b600060208284031215612ded57600080fd5b81356128f881612d41565b600080600060608486031215612e0d57600080fd5b612e1684612d10565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612e5457600080fd5b8235612e5f81612d41565b9150602083013567ffffffffffffffff80821115612e7c57600080fd5b818501915085601f830112612e9057600080fd5b813581811115612ea257612ea2612e2b565b604051601f8201601f19908116603f01168101908382118183101715612eca57612eca612e2b565b81604052828152886020848701011115612ee357600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b83811015612f20578181015183820152602001612f08565b838111156105d75750506000910152565b60008151808452612f49816020860160208601612f05565b601f01601f19169290920160200192915050565b602081526000610b656020830184612f31565b60008060408385031215612f8357600080fd5b612f8c83612d10565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b60058110612fce57634e487b7160e01b600052602160045260246000fd5b9052565b60208101610b688284612fb0565b60008060208385031215612ff357600080fd5b823567ffffffffffffffff8082111561300b57600080fd5b818501915085601f83011261301f57600080fd5b81358181111561302e57600080fd5b8660208260051b850101111561304357600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156130aa57603f19888603018452613098858351612f31565b9450928501929085019060010161307c565b5092979650505050505050565b60008060008060008060c087890312156130d057600080fd5b863595506130e060208801612d10565b94506040870135935060608701356130f781612d41565b9598949750929560808101359460a0909101359350915050565b600080600080600060a0868803121561312957600080fd5b8535945061313960208701612d10565b9350604086013561314981612d41565b9250606086013561315981612d41565b949793965091946080013592915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60ff84168152606081016132196020830185612fb0565b6132266040830184612fb0565b949350505050565b60ff93909316835260208301919091526001600160a01b0316604082015260600190565b60006020828403121561326457600080fd5b815180151581146128f857600080fd5b60006020828403121561328657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000826132c057634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156132d8576132d861328d565b500190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261330a57600080fd5b83018035915067ffffffffffffffff82111561332557600080fd5b60200191503681900382131561333a57600080fd5b9250929050565b60006000198214156133555761335561328d565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008083128015600160ff1b8501841216156133c8576133c861328d565b6001600160ff1b03840183138116156133e3576133e361328d565b50500390565b60ff9590951685526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b60008282101561342c5761342c61328d565b500390565b60006020828403121561344357600080fd5b81516128f881612d41565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60008160001904831182151516156134975761349761328d565b500290565b600080858511156134ac57600080fd5b838611156134b957600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156134f35780818660140360031b1b83161692505b505092915050565b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6040820152651b9d1c9858dd60d21b606082015260800190565b60008251613553818460208701612f05565b919091019291505056fe9e009ff93760292d06553768f140250c353d75b30af8863bce15ca17397f89cf360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc20c25d31eac18b20ec833a1a81b17835569ad58cea6706c94b15452114d730f0416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205d111e8bdf91e3bbc5dac200e1ea9a69cb3c0a561c955883bb3e379c3891874e64736f6c63430008090033",
}

// StakeAllocatorABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeAllocatorMetaData.ABI instead.
var StakeAllocatorABI = StakeAllocatorMetaData.ABI

// StakeAllocatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakeAllocatorMetaData.Bin instead.
var StakeAllocatorBin = StakeAllocatorMetaData.Bin

// DeployStakeAllocator deploys a new Ethereum contract, binding an instance of StakeAllocator to it.
func DeployStakeAllocator(auth *bind.TransactOpts, backend bind.ContractBackend, forwarder common.Address, subjectGateway common.Address, rewardsDistributor common.Address) (common.Address, *types.Transaction, *StakeAllocator, error) {
	parsed, err := StakeAllocatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakeAllocatorBin), backend, forwarder, subjectGateway, rewardsDistributor)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakeAllocator{StakeAllocatorCaller: StakeAllocatorCaller{contract: contract}, StakeAllocatorTransactor: StakeAllocatorTransactor{contract: contract}, StakeAllocatorFilterer: StakeAllocatorFilterer{contract: contract}}, nil
}

// StakeAllocator is an auto generated Go binding around an Ethereum contract.
type StakeAllocator struct {
	StakeAllocatorCaller     // Read-only binding to the contract
	StakeAllocatorTransactor // Write-only binding to the contract
	StakeAllocatorFilterer   // Log filterer for contract events
}

// StakeAllocatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakeAllocatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeAllocatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakeAllocatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeAllocatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakeAllocatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeAllocatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakeAllocatorSession struct {
	Contract     *StakeAllocator   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakeAllocatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakeAllocatorCallerSession struct {
	Contract *StakeAllocatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// StakeAllocatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakeAllocatorTransactorSession struct {
	Contract     *StakeAllocatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// StakeAllocatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakeAllocatorRaw struct {
	Contract *StakeAllocator // Generic contract binding to access the raw methods on
}

// StakeAllocatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakeAllocatorCallerRaw struct {
	Contract *StakeAllocatorCaller // Generic read-only contract binding to access the raw methods on
}

// StakeAllocatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakeAllocatorTransactorRaw struct {
	Contract *StakeAllocatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakeAllocator creates a new instance of StakeAllocator, bound to a specific deployed contract.
func NewStakeAllocator(address common.Address, backend bind.ContractBackend) (*StakeAllocator, error) {
	contract, err := bindStakeAllocator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakeAllocator{StakeAllocatorCaller: StakeAllocatorCaller{contract: contract}, StakeAllocatorTransactor: StakeAllocatorTransactor{contract: contract}, StakeAllocatorFilterer: StakeAllocatorFilterer{contract: contract}}, nil
}

// NewStakeAllocatorCaller creates a new read-only instance of StakeAllocator, bound to a specific deployed contract.
func NewStakeAllocatorCaller(address common.Address, caller bind.ContractCaller) (*StakeAllocatorCaller, error) {
	contract, err := bindStakeAllocator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorCaller{contract: contract}, nil
}

// NewStakeAllocatorTransactor creates a new write-only instance of StakeAllocator, bound to a specific deployed contract.
func NewStakeAllocatorTransactor(address common.Address, transactor bind.ContractTransactor) (*StakeAllocatorTransactor, error) {
	contract, err := bindStakeAllocator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorTransactor{contract: contract}, nil
}

// NewStakeAllocatorFilterer creates a new log filterer instance of StakeAllocator, bound to a specific deployed contract.
func NewStakeAllocatorFilterer(address common.Address, filterer bind.ContractFilterer) (*StakeAllocatorFilterer, error) {
	contract, err := bindStakeAllocator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorFilterer{contract: contract}, nil
}

// bindStakeAllocator binds a generic wrapper to an already deployed contract.
func bindStakeAllocator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakeAllocatorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeAllocator *StakeAllocatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeAllocator.Contract.StakeAllocatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeAllocator *StakeAllocatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeAllocator.Contract.StakeAllocatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeAllocator *StakeAllocatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeAllocator.Contract.StakeAllocatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeAllocator *StakeAllocatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeAllocator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeAllocator *StakeAllocatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeAllocator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeAllocator *StakeAllocatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeAllocator.Contract.contract.Transact(opts, method, params...)
}

// AllocatedDelegatorsStakePerManaged is a free data retrieval call binding the contract method 0x574ef613.
//
// Solidity: function allocatedDelegatorsStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCaller) AllocatedDelegatorsStakePerManaged(opts *bind.CallOpts, subjectType uint8, subject *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "allocatedDelegatorsStakePerManaged", subjectType, subject)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllocatedDelegatorsStakePerManaged is a free data retrieval call binding the contract method 0x574ef613.
//
// Solidity: function allocatedDelegatorsStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorSession) AllocatedDelegatorsStakePerManaged(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedDelegatorsStakePerManaged(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedDelegatorsStakePerManaged is a free data retrieval call binding the contract method 0x574ef613.
//
// Solidity: function allocatedDelegatorsStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCallerSession) AllocatedDelegatorsStakePerManaged(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedDelegatorsStakePerManaged(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedManagedStake is a free data retrieval call binding the contract method 0x9e4db100.
//
// Solidity: function allocatedManagedStake(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCaller) AllocatedManagedStake(opts *bind.CallOpts, subjectType uint8, subject *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "allocatedManagedStake", subjectType, subject)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllocatedManagedStake is a free data retrieval call binding the contract method 0x9e4db100.
//
// Solidity: function allocatedManagedStake(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorSession) AllocatedManagedStake(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedManagedStake(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedManagedStake is a free data retrieval call binding the contract method 0x9e4db100.
//
// Solidity: function allocatedManagedStake(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCallerSession) AllocatedManagedStake(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedManagedStake(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedOwnStakePerManaged is a free data retrieval call binding the contract method 0x993a364f.
//
// Solidity: function allocatedOwnStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCaller) AllocatedOwnStakePerManaged(opts *bind.CallOpts, subjectType uint8, subject *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "allocatedOwnStakePerManaged", subjectType, subject)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllocatedOwnStakePerManaged is a free data retrieval call binding the contract method 0x993a364f.
//
// Solidity: function allocatedOwnStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorSession) AllocatedOwnStakePerManaged(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedOwnStakePerManaged(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedOwnStakePerManaged is a free data retrieval call binding the contract method 0x993a364f.
//
// Solidity: function allocatedOwnStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCallerSession) AllocatedOwnStakePerManaged(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedOwnStakePerManaged(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedStakeFor is a free data retrieval call binding the contract method 0xc1bf97c8.
//
// Solidity: function allocatedStakeFor(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCaller) AllocatedStakeFor(opts *bind.CallOpts, subjectType uint8, subject *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "allocatedStakeFor", subjectType, subject)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllocatedStakeFor is a free data retrieval call binding the contract method 0xc1bf97c8.
//
// Solidity: function allocatedStakeFor(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorSession) AllocatedStakeFor(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedStakeFor(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedStakeFor is a free data retrieval call binding the contract method 0xc1bf97c8.
//
// Solidity: function allocatedStakeFor(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCallerSession) AllocatedStakeFor(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedStakeFor(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedStakePerManaged is a free data retrieval call binding the contract method 0xd39cbd12.
//
// Solidity: function allocatedStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCaller) AllocatedStakePerManaged(opts *bind.CallOpts, subjectType uint8, subject *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "allocatedStakePerManaged", subjectType, subject)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllocatedStakePerManaged is a free data retrieval call binding the contract method 0xd39cbd12.
//
// Solidity: function allocatedStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorSession) AllocatedStakePerManaged(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedStakePerManaged(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedStakePerManaged is a free data retrieval call binding the contract method 0xd39cbd12.
//
// Solidity: function allocatedStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCallerSession) AllocatedStakePerManaged(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedStakePerManaged(&_StakeAllocator.CallOpts, subjectType, subject)
}

// GetDelegatedSubjectType is a free data retrieval call binding the contract method 0x1daa0445.
//
// Solidity: function getDelegatedSubjectType(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorCaller) GetDelegatedSubjectType(opts *bind.CallOpts, subjectType uint8) (uint8, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "getDelegatedSubjectType", subjectType)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetDelegatedSubjectType is a free data retrieval call binding the contract method 0x1daa0445.
//
// Solidity: function getDelegatedSubjectType(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorSession) GetDelegatedSubjectType(subjectType uint8) (uint8, error) {
	return _StakeAllocator.Contract.GetDelegatedSubjectType(&_StakeAllocator.CallOpts, subjectType)
}

// GetDelegatedSubjectType is a free data retrieval call binding the contract method 0x1daa0445.
//
// Solidity: function getDelegatedSubjectType(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorCallerSession) GetDelegatedSubjectType(subjectType uint8) (uint8, error) {
	return _StakeAllocator.Contract.GetDelegatedSubjectType(&_StakeAllocator.CallOpts, subjectType)
}

// GetDelegatorSubjectType is a free data retrieval call binding the contract method 0xc133a562.
//
// Solidity: function getDelegatorSubjectType(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorCaller) GetDelegatorSubjectType(opts *bind.CallOpts, subjectType uint8) (uint8, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "getDelegatorSubjectType", subjectType)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetDelegatorSubjectType is a free data retrieval call binding the contract method 0xc133a562.
//
// Solidity: function getDelegatorSubjectType(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorSession) GetDelegatorSubjectType(subjectType uint8) (uint8, error) {
	return _StakeAllocator.Contract.GetDelegatorSubjectType(&_StakeAllocator.CallOpts, subjectType)
}

// GetDelegatorSubjectType is a free data retrieval call binding the contract method 0xc133a562.
//
// Solidity: function getDelegatorSubjectType(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorCallerSession) GetDelegatorSubjectType(subjectType uint8) (uint8, error) {
	return _StakeAllocator.Contract.GetDelegatorSubjectType(&_StakeAllocator.CallOpts, subjectType)
}

// GetSubjectTypeAgency is a free data retrieval call binding the contract method 0x762fa7b7.
//
// Solidity: function getSubjectTypeAgency(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorCaller) GetSubjectTypeAgency(opts *bind.CallOpts, subjectType uint8) (uint8, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "getSubjectTypeAgency", subjectType)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetSubjectTypeAgency is a free data retrieval call binding the contract method 0x762fa7b7.
//
// Solidity: function getSubjectTypeAgency(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorSession) GetSubjectTypeAgency(subjectType uint8) (uint8, error) {
	return _StakeAllocator.Contract.GetSubjectTypeAgency(&_StakeAllocator.CallOpts, subjectType)
}

// GetSubjectTypeAgency is a free data retrieval call binding the contract method 0x762fa7b7.
//
// Solidity: function getSubjectTypeAgency(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorCallerSession) GetSubjectTypeAgency(subjectType uint8) (uint8, error) {
	return _StakeAllocator.Contract.GetSubjectTypeAgency(&_StakeAllocator.CallOpts, subjectType)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_StakeAllocator *StakeAllocatorCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_StakeAllocator *StakeAllocatorSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _StakeAllocator.Contract.IsTrustedForwarder(&_StakeAllocator.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_StakeAllocator *StakeAllocatorCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _StakeAllocator.Contract.IsTrustedForwarder(&_StakeAllocator.CallOpts, forwarder)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_StakeAllocator *StakeAllocatorCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_StakeAllocator *StakeAllocatorSession) ProxiableUUID() ([32]byte, error) {
	return _StakeAllocator.Contract.ProxiableUUID(&_StakeAllocator.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_StakeAllocator *StakeAllocatorCallerSession) ProxiableUUID() ([32]byte, error) {
	return _StakeAllocator.Contract.ProxiableUUID(&_StakeAllocator.CallOpts)
}

// UnallocatedStakeFor is a free data retrieval call binding the contract method 0x6f096be8.
//
// Solidity: function unallocatedStakeFor(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCaller) UnallocatedStakeFor(opts *bind.CallOpts, subjectType uint8, subject *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "unallocatedStakeFor", subjectType, subject)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnallocatedStakeFor is a free data retrieval call binding the contract method 0x6f096be8.
//
// Solidity: function unallocatedStakeFor(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorSession) UnallocatedStakeFor(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.UnallocatedStakeFor(&_StakeAllocator.CallOpts, subjectType, subject)
}

// UnallocatedStakeFor is a free data retrieval call binding the contract method 0x6f096be8.
//
// Solidity: function unallocatedStakeFor(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCallerSession) UnallocatedStakeFor(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.UnallocatedStakeFor(&_StakeAllocator.CallOpts, subjectType, subject)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_StakeAllocator *StakeAllocatorCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_StakeAllocator *StakeAllocatorSession) Version() (string, error) {
	return _StakeAllocator.Contract.Version(&_StakeAllocator.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_StakeAllocator *StakeAllocatorCallerSession) Version() (string, error) {
	return _StakeAllocator.Contract.Version(&_StakeAllocator.CallOpts)
}

// AllocateDelegatorStake is a paid mutator transaction binding the contract method 0xb18d6d53.
//
// Solidity: function allocateDelegatorStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactor) AllocateDelegatorStake(opts *bind.TransactOpts, subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "allocateDelegatorStake", subjectType, subject, amount)
}

// AllocateDelegatorStake is a paid mutator transaction binding the contract method 0xb18d6d53.
//
// Solidity: function allocateDelegatorStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorSession) AllocateDelegatorStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.AllocateDelegatorStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// AllocateDelegatorStake is a paid mutator transaction binding the contract method 0xb18d6d53.
//
// Solidity: function allocateDelegatorStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) AllocateDelegatorStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.AllocateDelegatorStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// AllocateOwnStake is a paid mutator transaction binding the contract method 0x499572af.
//
// Solidity: function allocateOwnStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactor) AllocateOwnStake(opts *bind.TransactOpts, subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "allocateOwnStake", subjectType, subject, amount)
}

// AllocateOwnStake is a paid mutator transaction binding the contract method 0x499572af.
//
// Solidity: function allocateOwnStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorSession) AllocateOwnStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.AllocateOwnStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// AllocateOwnStake is a paid mutator transaction binding the contract method 0x499572af.
//
// Solidity: function allocateOwnStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) AllocateOwnStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.AllocateOwnStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// DepositAllocation is a paid mutator transaction binding the contract method 0xdfb4308e.
//
// Solidity: function depositAllocation(uint256 activeSharesId, uint8 subjectType, uint256 subject, address allocator, uint256 stakeAmount, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorTransactor) DepositAllocation(opts *bind.TransactOpts, activeSharesId *big.Int, subjectType uint8, subject *big.Int, allocator common.Address, stakeAmount *big.Int, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "depositAllocation", activeSharesId, subjectType, subject, allocator, stakeAmount, sharesAmount)
}

// DepositAllocation is a paid mutator transaction binding the contract method 0xdfb4308e.
//
// Solidity: function depositAllocation(uint256 activeSharesId, uint8 subjectType, uint256 subject, address allocator, uint256 stakeAmount, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorSession) DepositAllocation(activeSharesId *big.Int, subjectType uint8, subject *big.Int, allocator common.Address, stakeAmount *big.Int, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.DepositAllocation(&_StakeAllocator.TransactOpts, activeSharesId, subjectType, subject, allocator, stakeAmount, sharesAmount)
}

// DepositAllocation is a paid mutator transaction binding the contract method 0xdfb4308e.
//
// Solidity: function depositAllocation(uint256 activeSharesId, uint8 subjectType, uint256 subject, address allocator, uint256 stakeAmount, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) DepositAllocation(activeSharesId *big.Int, subjectType uint8, subject *big.Int, allocator common.Address, stakeAmount *big.Int, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.DepositAllocation(&_StakeAllocator.TransactOpts, activeSharesId, subjectType, subject, allocator, stakeAmount, sharesAmount)
}

// DidTransferShares is a paid mutator transaction binding the contract method 0xe2c11b8d.
//
// Solidity: function didTransferShares(uint256 sharesId, uint8 subjectType, address from, address to, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorTransactor) DidTransferShares(opts *bind.TransactOpts, sharesId *big.Int, subjectType uint8, from common.Address, to common.Address, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "didTransferShares", sharesId, subjectType, from, to, sharesAmount)
}

// DidTransferShares is a paid mutator transaction binding the contract method 0xe2c11b8d.
//
// Solidity: function didTransferShares(uint256 sharesId, uint8 subjectType, address from, address to, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorSession) DidTransferShares(sharesId *big.Int, subjectType uint8, from common.Address, to common.Address, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.DidTransferShares(&_StakeAllocator.TransactOpts, sharesId, subjectType, from, to, sharesAmount)
}

// DidTransferShares is a paid mutator transaction binding the contract method 0xe2c11b8d.
//
// Solidity: function didTransferShares(uint256 sharesId, uint8 subjectType, address from, address to, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) DidTransferShares(sharesId *big.Int, subjectType uint8, from common.Address, to common.Address, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.DidTransferShares(&_StakeAllocator.TransactOpts, sharesId, subjectType, from, to, sharesAmount)
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_StakeAllocator *StakeAllocatorTransactor) DisableRouter(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "disableRouter")
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_StakeAllocator *StakeAllocatorSession) DisableRouter() (*types.Transaction, error) {
	return _StakeAllocator.Contract.DisableRouter(&_StakeAllocator.TransactOpts)
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) DisableRouter() (*types.Transaction, error) {
	return _StakeAllocator.Contract.DisableRouter(&_StakeAllocator.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address __manager) returns()
func (_StakeAllocator *StakeAllocatorTransactor) Initialize(opts *bind.TransactOpts, __manager common.Address) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "initialize", __manager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address __manager) returns()
func (_StakeAllocator *StakeAllocatorSession) Initialize(__manager common.Address) (*types.Transaction, error) {
	return _StakeAllocator.Contract.Initialize(&_StakeAllocator.TransactOpts, __manager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address __manager) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) Initialize(__manager common.Address) (*types.Transaction, error) {
	return _StakeAllocator.Contract.Initialize(&_StakeAllocator.TransactOpts, __manager)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_StakeAllocator *StakeAllocatorTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_StakeAllocator *StakeAllocatorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _StakeAllocator.Contract.Multicall(&_StakeAllocator.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_StakeAllocator *StakeAllocatorTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _StakeAllocator.Contract.Multicall(&_StakeAllocator.TransactOpts, data)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_StakeAllocator *StakeAllocatorTransactor) SetAccessManager(opts *bind.TransactOpts, newManager common.Address) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "setAccessManager", newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_StakeAllocator *StakeAllocatorSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _StakeAllocator.Contract.SetAccessManager(&_StakeAllocator.TransactOpts, newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _StakeAllocator.Contract.SetAccessManager(&_StakeAllocator.TransactOpts, newManager)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_StakeAllocator *StakeAllocatorTransactor) SetName(opts *bind.TransactOpts, ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "setName", ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_StakeAllocator *StakeAllocatorSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _StakeAllocator.Contract.SetName(&_StakeAllocator.TransactOpts, ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _StakeAllocator.Contract.SetName(&_StakeAllocator.TransactOpts, ensRegistry, ensName)
}

// UnallocateDelegatorStake is a paid mutator transaction binding the contract method 0xa14d787c.
//
// Solidity: function unallocateDelegatorStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactor) UnallocateDelegatorStake(opts *bind.TransactOpts, subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "unallocateDelegatorStake", subjectType, subject, amount)
}

// UnallocateDelegatorStake is a paid mutator transaction binding the contract method 0xa14d787c.
//
// Solidity: function unallocateDelegatorStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorSession) UnallocateDelegatorStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UnallocateDelegatorStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// UnallocateDelegatorStake is a paid mutator transaction binding the contract method 0xa14d787c.
//
// Solidity: function unallocateDelegatorStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) UnallocateDelegatorStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UnallocateDelegatorStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// UnallocateOwnStake is a paid mutator transaction binding the contract method 0x4edd0f24.
//
// Solidity: function unallocateOwnStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactor) UnallocateOwnStake(opts *bind.TransactOpts, subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "unallocateOwnStake", subjectType, subject, amount)
}

// UnallocateOwnStake is a paid mutator transaction binding the contract method 0x4edd0f24.
//
// Solidity: function unallocateOwnStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorSession) UnallocateOwnStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UnallocateOwnStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// UnallocateOwnStake is a paid mutator transaction binding the contract method 0x4edd0f24.
//
// Solidity: function unallocateOwnStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) UnallocateOwnStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UnallocateOwnStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_StakeAllocator *StakeAllocatorTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_StakeAllocator *StakeAllocatorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UpgradeTo(&_StakeAllocator.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UpgradeTo(&_StakeAllocator.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_StakeAllocator *StakeAllocatorTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_StakeAllocator *StakeAllocatorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UpgradeToAndCall(&_StakeAllocator.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UpgradeToAndCall(&_StakeAllocator.TransactOpts, newImplementation, data)
}

// WithdrawAllocation is a paid mutator transaction binding the contract method 0xd0d87ac8.
//
// Solidity: function withdrawAllocation(uint256 activeSharesId, uint8 subjectType, uint256 subject, address allocator, uint256 stakeAmount, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorTransactor) WithdrawAllocation(opts *bind.TransactOpts, activeSharesId *big.Int, subjectType uint8, subject *big.Int, allocator common.Address, stakeAmount *big.Int, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "withdrawAllocation", activeSharesId, subjectType, subject, allocator, stakeAmount, sharesAmount)
}

// WithdrawAllocation is a paid mutator transaction binding the contract method 0xd0d87ac8.
//
// Solidity: function withdrawAllocation(uint256 activeSharesId, uint8 subjectType, uint256 subject, address allocator, uint256 stakeAmount, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorSession) WithdrawAllocation(activeSharesId *big.Int, subjectType uint8, subject *big.Int, allocator common.Address, stakeAmount *big.Int, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.WithdrawAllocation(&_StakeAllocator.TransactOpts, activeSharesId, subjectType, subject, allocator, stakeAmount, sharesAmount)
}

// WithdrawAllocation is a paid mutator transaction binding the contract method 0xd0d87ac8.
//
// Solidity: function withdrawAllocation(uint256 activeSharesId, uint8 subjectType, uint256 subject, address allocator, uint256 stakeAmount, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) WithdrawAllocation(activeSharesId *big.Int, subjectType uint8, subject *big.Int, allocator common.Address, stakeAmount *big.Int, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.WithdrawAllocation(&_StakeAllocator.TransactOpts, activeSharesId, subjectType, subject, allocator, stakeAmount, sharesAmount)
}

// StakeAllocatorAccessManagerUpdatedIterator is returned from FilterAccessManagerUpdated and is used to iterate over the raw logs and unpacked data for AccessManagerUpdated events raised by the StakeAllocator contract.
type StakeAllocatorAccessManagerUpdatedIterator struct {
	Event *StakeAllocatorAccessManagerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorAccessManagerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorAccessManagerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorAccessManagerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorAccessManagerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorAccessManagerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorAccessManagerUpdated represents a AccessManagerUpdated event raised by the StakeAllocator contract.
type StakeAllocatorAccessManagerUpdated struct {
	NewAddressManager common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAccessManagerUpdated is a free log retrieval operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_StakeAllocator *StakeAllocatorFilterer) FilterAccessManagerUpdated(opts *bind.FilterOpts, newAddressManager []common.Address) (*StakeAllocatorAccessManagerUpdatedIterator, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorAccessManagerUpdatedIterator{contract: _StakeAllocator.contract, event: "AccessManagerUpdated", logs: logs, sub: sub}, nil
}

// WatchAccessManagerUpdated is a free log subscription operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_StakeAllocator *StakeAllocatorFilterer) WatchAccessManagerUpdated(opts *bind.WatchOpts, sink chan<- *StakeAllocatorAccessManagerUpdated, newAddressManager []common.Address) (event.Subscription, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorAccessManagerUpdated)
				if err := _StakeAllocator.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessManagerUpdated is a log parse operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_StakeAllocator *StakeAllocatorFilterer) ParseAccessManagerUpdated(log types.Log) (*StakeAllocatorAccessManagerUpdated, error) {
	event := new(StakeAllocatorAccessManagerUpdated)
	if err := _StakeAllocator.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeAllocatorAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the StakeAllocator contract.
type StakeAllocatorAdminChangedIterator struct {
	Event *StakeAllocatorAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorAdminChanged represents a AdminChanged event raised by the StakeAllocator contract.
type StakeAllocatorAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_StakeAllocator *StakeAllocatorFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*StakeAllocatorAdminChangedIterator, error) {

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorAdminChangedIterator{contract: _StakeAllocator.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_StakeAllocator *StakeAllocatorFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *StakeAllocatorAdminChanged) (event.Subscription, error) {

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorAdminChanged)
				if err := _StakeAllocator.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_StakeAllocator *StakeAllocatorFilterer) ParseAdminChanged(log types.Log) (*StakeAllocatorAdminChanged, error) {
	event := new(StakeAllocatorAdminChanged)
	if err := _StakeAllocator.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeAllocatorAllocatedStakeIterator is returned from FilterAllocatedStake and is used to iterate over the raw logs and unpacked data for AllocatedStake events raised by the StakeAllocator contract.
type StakeAllocatorAllocatedStakeIterator struct {
	Event *StakeAllocatorAllocatedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorAllocatedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorAllocatedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorAllocatedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorAllocatedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorAllocatedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorAllocatedStake represents a AllocatedStake event raised by the StakeAllocator contract.
type StakeAllocatorAllocatedStake struct {
	SubjectType    uint8
	Subject        *big.Int
	Increase       bool
	Amount         *big.Int
	TotalAllocated *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterAllocatedStake is a free log retrieval operation binding the contract event 0x9e009ff93760292d06553768f140250c353d75b30af8863bce15ca17397f89cf.
//
// Solidity: event AllocatedStake(uint8 indexed subjectType, uint256 indexed subject, bool increase, uint256 amount, uint256 totalAllocated)
func (_StakeAllocator *StakeAllocatorFilterer) FilterAllocatedStake(opts *bind.FilterOpts, subjectType []uint8, subject []*big.Int) (*StakeAllocatorAllocatedStakeIterator, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "AllocatedStake", subjectTypeRule, subjectRule)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorAllocatedStakeIterator{contract: _StakeAllocator.contract, event: "AllocatedStake", logs: logs, sub: sub}, nil
}

// WatchAllocatedStake is a free log subscription operation binding the contract event 0x9e009ff93760292d06553768f140250c353d75b30af8863bce15ca17397f89cf.
//
// Solidity: event AllocatedStake(uint8 indexed subjectType, uint256 indexed subject, bool increase, uint256 amount, uint256 totalAllocated)
func (_StakeAllocator *StakeAllocatorFilterer) WatchAllocatedStake(opts *bind.WatchOpts, sink chan<- *StakeAllocatorAllocatedStake, subjectType []uint8, subject []*big.Int) (event.Subscription, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "AllocatedStake", subjectTypeRule, subjectRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorAllocatedStake)
				if err := _StakeAllocator.contract.UnpackLog(event, "AllocatedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAllocatedStake is a log parse operation binding the contract event 0x9e009ff93760292d06553768f140250c353d75b30af8863bce15ca17397f89cf.
//
// Solidity: event AllocatedStake(uint8 indexed subjectType, uint256 indexed subject, bool increase, uint256 amount, uint256 totalAllocated)
func (_StakeAllocator *StakeAllocatorFilterer) ParseAllocatedStake(log types.Log) (*StakeAllocatorAllocatedStake, error) {
	event := new(StakeAllocatorAllocatedStake)
	if err := _StakeAllocator.contract.UnpackLog(event, "AllocatedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeAllocatorBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the StakeAllocator contract.
type StakeAllocatorBeaconUpgradedIterator struct {
	Event *StakeAllocatorBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorBeaconUpgraded represents a BeaconUpgraded event raised by the StakeAllocator contract.
type StakeAllocatorBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_StakeAllocator *StakeAllocatorFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*StakeAllocatorBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorBeaconUpgradedIterator{contract: _StakeAllocator.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_StakeAllocator *StakeAllocatorFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *StakeAllocatorBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorBeaconUpgraded)
				if err := _StakeAllocator.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_StakeAllocator *StakeAllocatorFilterer) ParseBeaconUpgraded(log types.Log) (*StakeAllocatorBeaconUpgraded, error) {
	event := new(StakeAllocatorBeaconUpgraded)
	if err := _StakeAllocator.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeAllocatorInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the StakeAllocator contract.
type StakeAllocatorInitializedIterator struct {
	Event *StakeAllocatorInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorInitialized represents a Initialized event raised by the StakeAllocator contract.
type StakeAllocatorInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakeAllocator *StakeAllocatorFilterer) FilterInitialized(opts *bind.FilterOpts) (*StakeAllocatorInitializedIterator, error) {

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorInitializedIterator{contract: _StakeAllocator.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakeAllocator *StakeAllocatorFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *StakeAllocatorInitialized) (event.Subscription, error) {

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorInitialized)
				if err := _StakeAllocator.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakeAllocator *StakeAllocatorFilterer) ParseInitialized(log types.Log) (*StakeAllocatorInitialized, error) {
	event := new(StakeAllocatorInitialized)
	if err := _StakeAllocator.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeAllocatorRouterUpdatedIterator is returned from FilterRouterUpdated and is used to iterate over the raw logs and unpacked data for RouterUpdated events raised by the StakeAllocator contract.
type StakeAllocatorRouterUpdatedIterator struct {
	Event *StakeAllocatorRouterUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorRouterUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorRouterUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorRouterUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorRouterUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorRouterUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorRouterUpdated represents a RouterUpdated event raised by the StakeAllocator contract.
type StakeAllocatorRouterUpdated struct {
	Router common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRouterUpdated is a free log retrieval operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_StakeAllocator *StakeAllocatorFilterer) FilterRouterUpdated(opts *bind.FilterOpts, router []common.Address) (*StakeAllocatorRouterUpdatedIterator, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorRouterUpdatedIterator{contract: _StakeAllocator.contract, event: "RouterUpdated", logs: logs, sub: sub}, nil
}

// WatchRouterUpdated is a free log subscription operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_StakeAllocator *StakeAllocatorFilterer) WatchRouterUpdated(opts *bind.WatchOpts, sink chan<- *StakeAllocatorRouterUpdated, router []common.Address) (event.Subscription, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorRouterUpdated)
				if err := _StakeAllocator.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRouterUpdated is a log parse operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_StakeAllocator *StakeAllocatorFilterer) ParseRouterUpdated(log types.Log) (*StakeAllocatorRouterUpdated, error) {
	event := new(StakeAllocatorRouterUpdated)
	if err := _StakeAllocator.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeAllocatorUnallocatedStakeIterator is returned from FilterUnallocatedStake and is used to iterate over the raw logs and unpacked data for UnallocatedStake events raised by the StakeAllocator contract.
type StakeAllocatorUnallocatedStakeIterator struct {
	Event *StakeAllocatorUnallocatedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorUnallocatedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorUnallocatedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorUnallocatedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorUnallocatedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorUnallocatedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorUnallocatedStake represents a UnallocatedStake event raised by the StakeAllocator contract.
type StakeAllocatorUnallocatedStake struct {
	SubjectType    uint8
	Subject        *big.Int
	Increase       bool
	Amount         *big.Int
	TotalAllocated *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUnallocatedStake is a free log retrieval operation binding the contract event 0x20c25d31eac18b20ec833a1a81b17835569ad58cea6706c94b15452114d730f0.
//
// Solidity: event UnallocatedStake(uint8 indexed subjectType, uint256 indexed subject, bool increase, uint256 amount, uint256 totalAllocated)
func (_StakeAllocator *StakeAllocatorFilterer) FilterUnallocatedStake(opts *bind.FilterOpts, subjectType []uint8, subject []*big.Int) (*StakeAllocatorUnallocatedStakeIterator, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "UnallocatedStake", subjectTypeRule, subjectRule)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorUnallocatedStakeIterator{contract: _StakeAllocator.contract, event: "UnallocatedStake", logs: logs, sub: sub}, nil
}

// WatchUnallocatedStake is a free log subscription operation binding the contract event 0x20c25d31eac18b20ec833a1a81b17835569ad58cea6706c94b15452114d730f0.
//
// Solidity: event UnallocatedStake(uint8 indexed subjectType, uint256 indexed subject, bool increase, uint256 amount, uint256 totalAllocated)
func (_StakeAllocator *StakeAllocatorFilterer) WatchUnallocatedStake(opts *bind.WatchOpts, sink chan<- *StakeAllocatorUnallocatedStake, subjectType []uint8, subject []*big.Int) (event.Subscription, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "UnallocatedStake", subjectTypeRule, subjectRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorUnallocatedStake)
				if err := _StakeAllocator.contract.UnpackLog(event, "UnallocatedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnallocatedStake is a log parse operation binding the contract event 0x20c25d31eac18b20ec833a1a81b17835569ad58cea6706c94b15452114d730f0.
//
// Solidity: event UnallocatedStake(uint8 indexed subjectType, uint256 indexed subject, bool increase, uint256 amount, uint256 totalAllocated)
func (_StakeAllocator *StakeAllocatorFilterer) ParseUnallocatedStake(log types.Log) (*StakeAllocatorUnallocatedStake, error) {
	event := new(StakeAllocatorUnallocatedStake)
	if err := _StakeAllocator.contract.UnpackLog(event, "UnallocatedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeAllocatorUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the StakeAllocator contract.
type StakeAllocatorUpgradedIterator struct {
	Event *StakeAllocatorUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorUpgraded represents a Upgraded event raised by the StakeAllocator contract.
type StakeAllocatorUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_StakeAllocator *StakeAllocatorFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*StakeAllocatorUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorUpgradedIterator{contract: _StakeAllocator.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_StakeAllocator *StakeAllocatorFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *StakeAllocatorUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorUpgraded)
				if err := _StakeAllocator.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_StakeAllocator *StakeAllocatorFilterer) ParseUpgraded(log types.Log) (*StakeAllocatorUpgraded, error) {
	event := new(StakeAllocatorUpgraded)
	if err := _StakeAllocator.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
