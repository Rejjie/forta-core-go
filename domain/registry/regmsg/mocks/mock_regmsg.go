// Code generated by MockGen. DO NOT EDIT.
// Source: domain/registry/regmsg/regmsg.go

// Package mock_regmsg is a generated GoMock package.
package mock_regmsg

import (
	context "context"
	reflect "reflect"

	regmsg "github.com/forta-network/forta-core-go/domain/registry/regmsg"
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// ActionName mocks base method.
func (m *MockInterface) ActionName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ActionName indicates an expected call of ActionName.
func (mr *MockInterfaceMockRecorder) ActionName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionName", reflect.TypeOf((*MockInterface)(nil).ActionName))
}

// Info mocks base method.
func (m *MockInterface) Info() regmsg.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(regmsg.Message)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockInterfaceMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockInterface)(nil).Info))
}

// LogFields mocks base method.
func (m *MockInterface) LogFields() logrus.Fields {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogFields")
	ret0, _ := ret[0].(logrus.Fields)
	return ret0
}

// LogFields indicates an expected call of LogFields.
func (mr *MockInterfaceMockRecorder) LogFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogFields", reflect.TypeOf((*MockInterface)(nil).LogFields))
}

// MockHandlerInterface is a mock of HandlerInterface interface.
type MockHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerInterfaceMockRecorder
}

// MockHandlerInterfaceMockRecorder is the mock recorder for MockHandlerInterface.
type MockHandlerInterfaceMockRecorder struct {
	mock *MockHandlerInterface
}

// NewMockHandlerInterface creates a new mock instance.
func NewMockHandlerInterface(ctrl *gomock.Controller) *MockHandlerInterface {
	mock := &MockHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlerInterface) EXPECT() *MockHandlerInterfaceMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockHandlerInterface) Handle(ctx context.Context, logger *logrus.Entry, msg regmsg.I) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, logger, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockHandlerInterfaceMockRecorder) Handle(ctx, logger, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockHandlerInterface)(nil).Handle), ctx, logger, msg)
}
